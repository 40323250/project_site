<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<?xml-stylesheet ekr_test ?>
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="leo.20151212173315.1"><vh>@settings</vh>
<v t="leo.20151212173315.2"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="leo.20151212173315.3"><vh>@string initial_split_orientation = horizontal</vh></v>
</v>
<v t="amd.20160106095324.1" a="E"><vh>@path ./../</vh>
<v t="leo.20151213173811.1" a="E"><vh>假如要送到 gh-pages 分支, 使用下列按鈕</vh>
<v t="leo.20151212173658.1"><vh>@button gh-pages pelican</vh></v>
</v>
<v t="leo.20151213173830.1" a="E"><vh>假如要在近端檢視, 使用下列按鈕</vh>
<v t="leo.20151213085727.1"><vh>@button local pelican</vh></v>
</v>
<v t="amd.20160117010542.1"><vh>@button git rm -rf blog</vh></v>
<v t="amd.20151215180106.1"><vh>設定與開發</vh>
<v t="amd.20151216151325.1"><vh>@edit index.html</vh></v>
<v t="amd.20151216152209.1"><vh>@edit README.md</vh></v>
<v t="leo.20151213230723.1"><vh>Pelican 設定</vh>
<v t="leo.20151213230957.1"><vh>文章 Date 設定</vh></v>
<v t="leo.20151213230729.1"><vh>使用 summary plugin</vh></v>
</v>
<v t="amd.20151215170117.1"><vh>以下 pelicanconf.py 為近端與遠端的共同設定</vh></v>
<v t="leo.20151212173725.1"><vh>@edit pelicanconf.py</vh></v>
<v t="amd.20151215170142.1"><vh>以下 publishconf.py 為遠端所使用的設定</vh></v>
<v t="leo.20151212173803.1"><vh>@edit publishconf.py</vh></v>
<v t="amd.20151215170221.1"><vh>以下 local_publishconf.py 為近端所使用的設定</vh></v>
<v t="leo.20151213085752.1"><vh>@edit local_publishconf.py</vh></v>
<v t="amd.20151215121740.1" a="E"><vh>@path theme</vh>
<v t="amd.20151215121758.1" a="E"><vh>@path pelican-bootstrap3</vh>
<v t="amd.20151215121816.1" a="E"><vh>@path templates</vh>
<v t="amd.20151215121827.1"><vh>@edit base.html</vh></v>
<v t="amd.20151215121849.1"><vh>@edit search.html</vh></v>
<v t="amd.20151215152634.1"><vh>@edit tags.html</vh></v>
</v>
<v t="amd.20151216181314.1" a="E"><vh>@path static</vh>
<v t="amd.20151216181314.2" a="E"><vh>@path css</vh>
<v t="amd.20151216181314.3" a="E"><vh>@path pygments</vh>
<v t="amd.20151216181314.4"><vh>@edit fruity.css</vh></v>
</v>
</v>
</v>
</v>
<v t="amd.20151215154950.1" a="E"><vh>@path pelican-bootstrap3_local</vh>
<v t="amd.20151215154950.2"><vh>@path templates</vh>
<v t="amd.20151215154950.3"><vh>@edit base.html</vh></v>
<v t="amd.20151215154950.4"><vh>@edit search.html</vh></v>
<v t="amd.20151215162536.1" a="E"><vh>@path includes</vh>
<v t="amd.20151215162510.1"><vh>@edit sidebar.html</vh></v>
</v>
<v t="amd.20151215154950.5"><vh>@edit tags.html</vh></v>
</v>
<v t="amd.20151216173334.1" a="E"><vh>@path static</vh>
<v t="amd.20151216173344.1" a="E"><vh>@path css</vh>
<v t="amd.20151216173352.1" a="E"><vh>@path pygments</vh>
<v t="amd.20151216173409.1"><vh>@edit fruity.css</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="amd.20151215170326.1"><vh>以下在修改或查驗 plugin 目錄下的檔案</vh></v>
<v t="amd.20151215154225.1" a="E"><vh>@path plugin</vh>
<v t="amd.20151215154238.1" a="E"><vh>@path tipue_search</vh>
<v t="amd.20151215154248.1"><vh>@edit tipue_search.py</vh></v>
</v>
</v>
</v>
<v t="amd.20160301205134.1"><vh>Flask 專案</vh>
<v t="amd.20160301205148.1"><vh>@edit setup.py</vh></v>
<v t="amd.20160301205822.1"><vh>@edit config.py</vh></v>
<v t="amd.20160301205303.1"><vh>@edit wsgi.py</vh></v>
<v t="amd.20160301205326.1" a="E"><vh>@clean myflaskapp.py</vh>
<v t="amd.20160301205326.2"><vh>send_static</vh></v>
<v t="amd.20160301205326.3"><vh>index</vh></v>
<v t="amd.20160301205326.4"><vh>user</vh></v>
<v t="amd.20160301205326.5"><vh>req1</vh></v>
<v t="amd.20160301205326.6"><vh>red</vh></v>
<v t="amd.20160301205326.7"><vh>guessform</vh></v>
<v t="amd.20160301205326.8"><vh>docheck</vh></v>
<v t="amd.20160301205326.9"><vh>addgithubform</vh></v>
<v t="amd.20160301205326.10"><vh>addgithub</vh></v>
<v t="amd.20160301205326.11"><vh>autho_index</vh></v>
<v t="amd.20160301205326.12"><vh>autho_login</vh></v>
<v t="amd.20160301205326.17"><vh>cadpaform</vh></v>
<v t="amd.20160301205326.18"><vh>cadpaadd</vh></v>
</v>
<v t="amd.20160301205410.1" a="E"><vh>@path templates</vh>
<v t="amd.20160301205410.2"><vh>@edit index.html</vh></v>
<v t="amd.20160301205410.3"><vh>@edit user.html</vh></v>
<v t="amd.20160301205410.4"><vh>@edit guessform.html</vh></v>
<v t="amd.20160301205410.5"><vh>@edit docheck.html</vh></v>
<v t="amd.20160301205410.6"><vh>@edit toobig.html</vh></v>
<v t="amd.20160301205410.7"><vh>@edit toosmall.html</vh></v>
<v t="amd.20160301205410.8"><vh>@edit autho_base.html</vh></v>
<v t="amd.20160301205410.9"><vh>@edit autho_index.html</vh></v>
<v t="amd.20160301205410.10"><vh>@edit autho_login.html</vh></v>
<v t="amd.20160301205410.11"><vh>@edit addgithubform.html</vh></v>
<v t="amd.20160301205410.15"><vh>@edit cadpaform.html</vh></v>
<v t="amd.20160301205410.19"><vh>@edit cadpaerror.html</vh></v>
</v>
</v>
<v t="amd.20160301010714.1"><vh>組員名單</vh></v>
<v t="amd.20160301223228.1"><vh>程式測試</vh></v>
<v t="amd.20160301011834.1" a="E"><vh>參考資料</vh>
<v t="amd.20160302110137.1"><vh>機械設計專案參考</vh></v>
</v>
</v>
<v t="amd.20151215170350.1"><vh>以下為 content 目錄中的 md 檔案</vh></v>
<v t="amd.20160106093610.1"><vh>協同網誌編寫規範</vh></v>
<v t="amd.20160301001423.1"><vh>專題類別與標籤規劃</vh></v>
<v t="amd.20151216001126.1"><vh>md 檔案範例</vh></v>
<v t="amd.20151215170031.1" a="E"><vh>@path ./../content</vh>
<v t="amd.20160106093454.1" a="E"><vh>yen 所寫的網誌文章</vh>
<v t="amd.20160213095053.1" a="E"><vh>201603</vh>
<v t="amd.20160224170554.1"><vh>@edit yen_20160301.md</vh></v>
<v t="amd.20160301114516.1"><vh>@edit yen_20160301-1.md</vh></v>
<v t="leo.20160301161358.1"><vh>@edit yen_20160301-2.md</vh></v>
<v t="amd.20160302114829.1"><vh>@edit yen_20160302.md</vh></v>
</v>
</v>
</v>
<v t="amd.20160106094754.1" a="E"><vh>@path ./../content/pages</vh>
<v t="amd.20160106094829.1" a="E"><vh>yen 所寫的 pages 文章</vh>
<v t="amd.20160106094844.1"><vh>@edit yen_pages_1.md</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="amd.20151215121740.1"></t>
<t tx="amd.20151215121758.1"></t>
<t tx="amd.20151215121816.1"></t>
<t tx="amd.20151215154225.1"></t>
<t tx="amd.20151215154238.1"></t>
<t tx="amd.20151215154950.1"></t>
<t tx="amd.20151215154950.2"></t>
<t tx="amd.20151215162536.1"></t>
<t tx="amd.20151215170031.1"></t>
<t tx="amd.20151215170117.1"></t>
<t tx="amd.20151215170142.1"></t>
<t tx="amd.20151215170221.1"></t>
<t tx="amd.20151215170326.1"></t>
<t tx="amd.20151215170350.1"></t>
<t tx="amd.20151215180106.1"></t>
<t tx="amd.20151216001126.1">@language md
Title: 文章標題 (請注意各文章的標題不可相同, 比較保險的作法是冠上四個學號尾碼)
Category: 類別
Tags: 標籤
Author: yen

這裡放入文章摘要

&lt;!-- PELICAN_END_SUMMARY --&gt;

這裡為文章主要內容</t>
<t tx="amd.20151216173334.1"></t>
<t tx="amd.20151216173344.1"></t>
<t tx="amd.20151216173352.1"></t>
<t tx="amd.20151216181314.1"></t>
<t tx="amd.20151216181314.2"></t>
<t tx="amd.20151216181314.3"></t>
<t tx="amd.20160106093454.1"></t>
<t tx="amd.20160106093610.1">協同成員的 .leo 檔案

    每一位協同者, 各自可以在 users 目錄下擁有一個 .leo 檔案, 用來維護各自位於 content 目錄下的 .md 檔案,
    
    例如: 
    
    user yen 的 .leo 檔案位於 users/yen.leo
    
    user 40323123 的 .leo 檔案位於 users/40323123.leo

協同成員的 .md 檔案命名

    由於各成員所編寫的 .md 檔案都位於 content 目錄下, 因此必須在各負責的 .md 檔案名稱冠上用戶名稱,
    
    例如: 
    
    由 yen 負責編寫的 .md 檔案, 特別命名為 yen_20160301.md, 若一天有兩篇以上文章, 則取 yen_20160301-1.md
    
    由 40323123 負責編寫的 .md 檔案, 特別命名為 40323123_20160301.md, 若一天有兩篇以上文章, 則取 40323123_20160301-1.md
    
    當使用者要利用 pelican 在近端轉換網誌時, 必須使用 local-pelican 按鈕, 若要送到 github pages 網站, 則必須透過 gh-pages-pelican 按鈕轉檔.

pages 文章

    寫在 content/pages 目錄中的 .md 檔案, 將會被轉為網誌 pages 內容

</t>
<t tx="amd.20160106094754.1"></t>
<t tx="amd.20160106094829.1"></t>
<t tx="amd.20160106095324.1"></t>
<t tx="amd.20160117010542.1">@language python
import os
os.system("git rm -rf blog")
g.es("git rm -rf blog 執行完畢")</t>
<t tx="amd.20160213095053.1"></t>
<t tx="amd.20160301001423.1">類別:

2016g1

2016g2

2016g3

Tutorial

MISC</t>
<t tx="amd.20160301010714.1">40323123 (smpss91341)
40323130
40323131
40323143
40323205
40323206 (michell1995huang)
40323218
40323231
40323230
40323203
40323214
40323250</t>
<t tx="amd.20160301011834.1">http://www.arc.id.au/CangoAnimationManual.html

https://github.com/google/oauth2client

http://www.jianshu.com/p/f5fcc0931813

https://developers.google.com/gmail/api/quickstart/python</t>
<t tx="amd.20160301205134.1"></t>
<t tx="amd.20160301205326.1">@language python
# coding: utf-8
from flask import Flask, send_from_directory, request, redirect, render_template, session, make_response
import random
import github3
# for authomatic
from authomatic.adapters import WerkzeugAdapter
from authomatic import Authomatic
# from config.py 導入 CONFIG
from config import CONFIG

app = Flask(__name__)

# Instantiate Authomatic.
authomatic = Authomatic(CONFIG, 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T', report_errors=False)

# 使用 session 必須要設定 secret_key
# In order to use sessions you have to set a secret key
# set the secret key.  keep this really secret:
app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'

@others

if __name__ == "__main__":
    app.run()

</t>
<t tx="amd.20160301205326.10">@app.route('/addgithub')
def addgithub():
    #################################
    filepath = "/home/amd/Desktop/data.txt"
    with open(filepath, "r") as f:
        datalist = f.read().splitlines()
    #data.txt 格式
    #url,https://github.com/username/repo.git
    #repo,repo
    #username,username
    #password,password
    url = datalist[0].split(",")[1]
    repository = datalist[1].split(",")[1]
    username = datalist[2].split(",")[1]
    password = datalist[3].split(",")[1]
    #################################
    # 登入系統
    g = github3.login(username, password)
    # user = g.me()
    # 以下修改 profile
    '''
    new_name = '2016測試用帳號'
    blog = 'http://測試用.帳號/'
    company = '測試用公司'
    bio = "測試用 bio"
    if g.update_me(new_name, blog, company, bio=bio):
    print('Profile 已經更新.')
    '''
    # 以下則新增協同者
    g.repository(username, repository).add_collaborator("coursemdetw")

    return "done"</t>
<t tx="amd.20160301205326.11">@app.route('/autho_index')
def autho_index():
    
    return render_template('autho_index.html')</t>
<t tx="amd.20160301205326.12">@app.route('/autho_login/&lt;provider_name&gt;/', methods=['GET', 'POST'])
def autho_login(provider_name):
    
    # We need response object for the WerkzeugAdapter.
    response = make_response()
    
    # Log the user in, pass it the adapter and the provider name.
    result = authomatic.login(WerkzeugAdapter(request, response), provider_name)
    
    # If there is no LoginResult object, the login procedure is still pending.
    if result:
        if result.user:
            # We need to update the user to get more info.
            result.user.update()
        
        # The rest happens inside the template.
        return render_template('autho_login.html', result=result)
    
    # Don't forget to return the response.
    return response</t>
<t tx="amd.20160301205326.17">@app.route('/cadpaform')
def cadpaform():
    # https://github.com/username/repository_title 協同者新增表單
    return render_template("cadpaform.html")</t>
<t tx="amd.20160301205326.18">@app.route('/cadpaadd', methods=['POST'])
def cadpaadd():
    #################################
    filepath = "/home/amd/Desktop/data.txt"
    with open(filepath, "r") as f:
        datalist = f.read().splitlines()
    #data.txt 格式
    #url,https://github.com/username/repo.git
    #repo,repo
    #username,username
    #password,password
    url = datalist[0].split(",")[1]
    repository = datalist[1].split(",")[1]
    username = datalist[2].split(",")[1]
    password = datalist[3].split(",")[1]
    #################################
    account = request.form["account"]
    # 登入系統
    g = github3.login(username, password)
    # 以下則新增協同者
    #g.repository(倉儲帳號, 倉儲名稱).add_collaborator(協同者 github 帳號)
    # 若新增 collaborator 成功傳回 True 否則傳回 False
    if g.repository(username, repository).add_collaborator(account):
        # 共同使用 cpaadd.html
        return render_template("cpaadd.html", account=account, repository=repository, url=url)
    else:
        return render_template("cadpaerror.html")</t>
<t tx="amd.20160301205326.2"># setup static directory
# 由於 gh-pages 對應的靜態文件位於 blog 目錄下, 因此將原先的 static 改為 blog
@app.route('/blog/&lt;path:path&gt;')
def send_static(path):
    return send_from_directory('blog', path)</t>
<t tx="amd.20160301205326.3">@app.route("/")
def index():
    #這是猜數字遊戲的起始表單, 主要在產生答案, 並且將 count 歸零
    # 將標準答案存入 answer session 對應區
    theanswer = random.randint(1, 100)
    thecount = 0
    # 將答案與計算次數變數存進 session 對應變數
    session['answer'] = theanswer
    session['count'] = thecount

    return render_template("index.html", answer=theanswer, count=thecount)


</t>
<t tx="amd.20160301205326.4">@app.route('/user/&lt;name&gt;')
def user(name):
    return render_template("user.html", name=name)</t>
<t tx="amd.20160301205326.5">@app.route('/req1')
def req1():
    user_agent = request.headers.get('User-Agent')
    return '&lt;p&gt;Your browser is %s&lt;/p&gt;' % user_agent</t>
<t tx="amd.20160301205326.6">@app.route('/red')
def red():
    # 重新導向 google
    return redirect("http://www.google.com")</t>
<t tx="amd.20160301205326.7">@app.route('/guessform')
def guessform():
    session["count"] += 1
    guess = session.get("guess")
    theanswer = session.get("answer")
    count = session.get("count")
    return render_template("guessform.html", guess=guess, answer=theanswer, count=count)</t>
<t tx="amd.20160301205326.8">@app.route('/docheck', methods=['POST'])
def docheck():
    # session[] 存資料
    # session.get() 取 session 資料
    # 利用 request.form[] 取得表單欄位資料, 然後送到 template
    guess = request.form["guess"]
    session["guess"] = guess
    # 假如使用者直接執行 doCheck, 則設法轉回根方法
    if guess is None:
        redirect("/")
    # 從 session 取出 answer 對應資料, 且處理直接執行 docheck 時無法取 session 值情況
    try:
        theanswer = int(session.get('answer'))
    except:
        redirect("/")
    # 經由表單所取得的 guess 資料型別為 string
    try:
        theguess = int(guess)
    except:
        return redirect("/guessform")
    # 每執行 doCheck 一次,次數增量一次
    session["count"] += 1
    count = session.get("count")
    # 答案與所猜數字進行比對
    if theanswer &lt; theguess:
        return render_template("toobig.html", guess=guess, answer=theanswer, count=count)
    elif theanswer &gt; theguess:
        return render_template("toosmall.html", guess=guess, answer=theanswer, count=count)
    else:
        # 已經猜對, 從 session 取出累計猜測次數
        thecount = session.get('count')
        return "猜了 "+str(thecount)+" 次, 終於猜對了, 正確答案為 "+str(theanswer)+": &lt;a href='/'&gt;再猜&lt;/a&gt;"
    return render_template("docheck.html", guess=guess)
 </t>
<t tx="amd.20160301205326.9">@app.route('/addgithubform')
def addgithubform():
    return render_template("addfithubform.html")</t>
<t tx="amd.20160301205410.1"></t>
<t tx="amd.20160301223228.1">filepath = "/home/amd/Desktop/data.txt"
with open(filepath, "r") as f:
    datalist = f.read().splitlines()

g.es(datalist)

#第1行為 repository 的 url
#第2行為 repository name
#第3行為 username
#第四行為 password
url = datalist[0].split(",")[1]
repository = datalist[1].split(",")[1]
username = datalist[2].split(",")[1]
password = datalist[3].split(",")[1]
g.es(url)
g.es(repository)
g.es(username)
g.es(password)</t>
<t tx="amd.20160302110137.1">搜尋機械設計專案的目的在進行分類:

機構 - 省力, 增加功能, 增加效能

能源 - 省能源, 製能, 整合運用

機電控制 - 提高效能

方法:

系統模擬

數值分析

自動控制

工程資料管理 - PDM, PLM

http://www.mtu.edu/mechanical/undergraduate/senior-design/spring-2015/

客車或貨車尾門的設計

    設計目的: 增加額外容量功能或休憩功能
    
綠色能源系統

    設計目的: 家用風力發電, 運動器材發電, 太陽能發電與電力控管系統
    
https://capstone.me.ucsb.edu/past-projects

https://www.youtube.com/results?search_query=mechanical+design+project

http://poisson.me.dal.ca/~DP_MECH/past_projects.html

http://poisson.me.dal.ca/~DP_MECH/

https://www.me.washington.edu/students/ug/capstone.html

https://projectselect.mecheng.adelaide.edu.au/

https://engineering.temple.edu/departments-programs/senior-design-projects?filter=department/3</t>
<t tx="leo.20151212173315.1"></t>
<t tx="leo.20151212173315.2">QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;'CherryPy', 'pytz', 'mako', 'beautifulsoup4', 'pymysql', 'peewee'
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="leo.20151212173315.3">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="leo.20151212173658.1">@language python
import os
#os.system("pelican content -o ./ -s publishconf.py -t theme/pelican-bootstrap3")
os.system("pelican content -o blog -s publishconf.py")
g.es("admin pelican 執行完畢")

</t>
<t tx="leo.20151213085727.1">@language python
import os
#os.system("pelican content -o output -s local_publishconf.py -t theme/pelican-bootstrap3")
os.system("pelican content -o blog -s local_publishconf.py")
g.es("admin pelican 近端執行完畢")


</t>
<t tx="leo.20151213173811.1"></t>
<t tx="leo.20151213173830.1"></t>
<t tx="leo.20151213230723.1"></t>
<t tx="leo.20151213230729.1">利用

&lt;!-- PELICAN_END_SUMMARY --&gt;

來界定 Summary 摘要內容

前提, 必須設定 

PLUGIN_PATHS = ['plugin']

與

PLUGINS = ['liquid_tags.notebook', 'summary']

並且從 https://github.com/getpelican/pelican-plugins

取得 summary plugin</t>
<t tx="leo.20151213230957.1"># 設定網誌以 md 檔案建立的 file system date 為準, 無需自行設定

DEFAULT_DATE = 'fs'</t>
</tnodes>
</leo_file>
