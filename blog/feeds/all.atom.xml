<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>機械設計專題</title><link href="http://project.mde.tw/blog/" rel="alternate"></link><link href="http://project.mde.tw/blog/feeds/all.atom.xml" rel="self"></link><id>http://project.mde.tw/blog/</id><updated>2016-03-01T16:35:21+08:00</updated><entry><title>yen - 協同產品設計課程 Task0 延伸練習</title><link href="http://project.mde.tw/blog/yen-xie-tong-chan-pin-she-ji-ke-cheng-task0-yan-shen-lian-xi.html" rel="alternate"></link><updated>2016-03-01T16:35:21+08:00</updated><author><name>yen</name></author><id>tag:project.mde.tw,2016-03-01:blog/yen-xie-tong-chan-pin-she-ji-ke-cheng-task0-yan-shen-lian-xi.html</id><summary type="html">&lt;p&gt;如何將電腦教室分組, 比序與排座位的流程網際自動化&lt;/p&gt;


&lt;p&gt;在 &lt;a href="http://chiamingyen.github.io/kmolab/blog/2016-spring-cd-task0.html"&gt;http://chiamingyen.github.io/kmolab/blog/2016-spring-cd-task0.html&lt;/a&gt; 中, 說明了一個實際的電腦教室排座位的流程, 其中使用了網際即時試算表 &lt;a href="https://ethercalc.tw/"&gt;https://ethercalc.tw/&lt;/a&gt;, 以及幾個 Python3 的資料處理程式, 最後可以根據電腦教室的配置, 完成各組員的座位編排.&lt;/p&gt;
&lt;p&gt;座位編排流程如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;讓所有學員自行分組&lt;/li&gt;
&lt;li&gt;分組確定後, 根據學號比序, 產生各組組長&lt;/li&gt;
&lt;li&gt;再根據各組組長學號, 再進行組長學號比序, 以決定各組的組序&lt;/li&gt;
&lt;li&gt;完成各組序與各組內的組員順序後, 再根據座位編排規定, 最後列出學員座位表, 讓學員依序入座&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本機械設計專題製作練習, 希望能夠利用網際程式方法, 以  &lt;a href="https://github.com/mitsuhiko/flask"&gt;https://github.com/mitsuhiko/flask&lt;/a&gt;, &lt;a href="https://www.sqlite.org/"&gt;https://www.sqlite.org/&lt;/a&gt; 將流程自動化, 當操作者從網際即時試算表中取得各組分組資料後, 可以輸入本練習所完成的網站表單中, 然後操作者可以根據頁面中的選項, 選擇各組選出組長的方式, 依據學號增量排序, 學號最小者為組長, 或遞減排序, 學號大者為組長, 或者亂數排序後, 排序第一組為組長等三種選擇.&lt;/p&gt;
&lt;p&gt;接著操作者可以在頁面選擇組序排列的選項, 也是學號遞增排序, 學號遞減排序或學號亂數排序, 以便訂出各組的組序.&lt;/p&gt;
&lt;p&gt;當操作者決定各組內與組外的排序選項後, 按下"排電腦教室座位" (也可加入排座位的選項, 列先排, 行先排或者全部按亂數排.&lt;/p&gt;
&lt;p&gt;完成座位安排後, 必須將各組組員名單與分組名單分別存入資料庫, 以便後續讓使用者查詢各組座位與分組資訊, 並且在隨後
加入各組員回報電腦使用情形與各組員自評登錄成績之應用.&lt;/p&gt;
&lt;p&gt;原始倉儲資料: &lt;a href="https://github.com/2015fallhw/2016springcd/tree/gh-pages"&gt;https://github.com/2015fallhw/2016springcd/tree/gh-pages&lt;/a&gt;&lt;/p&gt;</summary><category term="Flask"></category><category term="Brython"></category><category term="Python"></category><category term="練習"></category><category term="流程自動化"></category></entry><entry><title>40323130 - 說明如何參與協同機械設計專題網誌編寫</title><link href="http://project.mde.tw/blog/40323130-shuo-ming-ru-he-can-yu-xie-tong-ji-jie-she-ji-zhuan-ti-wang-zhi-bian-xie.html" rel="alternate"></link><updated>2016-03-01T14:33:18+08:00</updated><author><name>40323130</name></author><id>tag:project.mde.tw,2016-03-01:blog/40323130-shuo-ming-ru-he-can-yu-xie-tong-ji-jie-she-ji-zhuan-ti-wang-zhi-bian-xie.html</id><summary type="html">&lt;p&gt;只要是具備協同權限的用戶, 都可以在機械設計專題網誌中貢獻內容&lt;/p&gt;


&lt;p&gt;這裡為 40323130 所寫的文章主要內容&lt;/p&gt;
&lt;p&gt;本機械設計專題網誌的架構包含近端與遠端的資料檢視設計, 專案資料以 Leo Editor 進行管理.&lt;/p&gt;
&lt;p&gt;以下教學影片示範從 &lt;a href="http://project.mde.tw"&gt;http://project.mde.tw&lt;/a&gt; 機械設計專題網誌中取得倉儲的網址後, 可以利用 git clone 複製倉儲資料, 之後:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用 git checkout gh-pages 將工作目錄指到 Github pages 的對應分支內容&lt;/li&gt;
&lt;li&gt;以 Leo Editor 開啟 users 目錄下的 user_template.leo 檔案&lt;/li&gt;
&lt;li&gt;根據自己的帳號, 修改 .md 檔案存檔的名稱, 目的在透過加入帳號與時間註記, 避免 content 目錄中的檔案彼此複寫&lt;/li&gt;
&lt;li&gt;在 .md 的 Title 標題中, 冠上自己的帳號, 主要也是避免 Pelican 將 .md 根據標題轉成 html 時, 產生檔案複寫&lt;/li&gt;
&lt;li&gt;本系統的 Pelican 分為近端與遠端轉檔按鈕, 因此若要在近端檢查時, 與要推送到 Github 時採用不同轉檔按鈕&lt;/li&gt;
&lt;li&gt;為了簡化 git 指令的 add, commit 與 push, 加入 ungit, 只要啟動隨身系統候, 再利用 start_ungit.bat 開啟, 就可以在瀏覽器中簡化改版過程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Vimeo:&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/157247703" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/157247703"&gt;2016project_1&lt;/a&gt; from &lt;a href="https://vimeo.com/user24079973"&gt;虎尾科大機械設計工程&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Youtube:&lt;/p&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/hQR1wxALifU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="範例"></category></entry><entry><title>yen - 2016 年專題啟動</title><link href="http://project.mde.tw/blog/yen-2016-nian-zhuan-ti-qi-dong.html" rel="alternate"></link><updated>2016-03-01T14:28:38+08:00</updated><author><name>yen</name></author><id>tag:project.mde.tw,2016-03-01:blog/yen-2016-nian-zhuan-ti-qi-dong.html</id><summary type="html">&lt;p&gt;利用 Github Pages 與 Pelican 建立協同專題製作網誌&lt;/p&gt;


&lt;h2&gt;機械設計工程網誌啟動&lt;/h2&gt;
&lt;p&gt;本網誌自 2016 Spring 開始啟動, 相關建置步驟如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以 &lt;a href="https://github.com/coursemdetw"&gt;https://github.com/coursemdetw&lt;/a&gt; 帳號建立 Gihub 倉儲 &lt;a href="https://github.com/coursemdetw/project_site"&gt;https://github.com/coursemdetw/project_site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;將倉儲資料 git clone 到近端&lt;/li&gt;
&lt;li&gt;利用 git branch 指令, 建立 gh-pages 分支&lt;/li&gt;
&lt;li&gt;利用 git checkout 指令, 切換至 gh-pages 分支&lt;/li&gt;
&lt;li&gt;開始建立 Pelican 網誌所需的協同架構資料&lt;/li&gt;
&lt;li&gt;安排 users 目錄, 將分別存放各協同組員的 .leo 檔案&lt;/li&gt;
&lt;li&gt;確定 gh-pages 分支中的網誌 &lt;a href="http://coursemdetw.github.io/project_site/"&gt;http://coursemdetw.github.io/project_site/&lt;/a&gt; 可以正常運作&lt;/li&gt;
&lt;li&gt;根據 Github pages 專用網域設定說明 &lt;a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/"&gt;https://help.github.com/articles/using-a-custom-domain-with-github-pages/&lt;/a&gt;, 建立 CNAME, 納入 project.mde.tw&lt;/li&gt;
&lt;li&gt;將 &lt;a href="https://github.com/coursemdetw/project_site"&gt;https://github.com/coursemdetw/project_site&lt;/a&gt; 倉儲的 Default Branch 設為 gh-pages 分支&lt;/li&gt;
&lt;li&gt;在 mde.tw 網域的 DNS 代管設定中, 加入 project.mde.tw 與 coursemdetw.github.io 之間的 CNAME 別名設定&lt;/li&gt;
&lt;li&gt;等待 CNAME 別名生效後, &lt;a href="http://project.mde.tw"&gt;http://project.mde.tw&lt;/a&gt; 即可正常連結使用&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Pelican 網誌設定&lt;/h2&gt;
&lt;p&gt;由於本網誌將 Pelican &lt;a href="https://github.com/getpelican/pelican"&gt;https://github.com/getpelican/pelican&lt;/a&gt; 設定相關的所有資料都留在 Gihub 倉儲 &lt;a href="https://github.com/coursemdetw/project_site"&gt;https://github.com/coursemdetw/project_site&lt;/a&gt; 中, 目的在讓其他人可以參考本網誌的所有細節內容. 一般在實際應用, 只需將 blog 目錄 &lt;a href="https://github.com/coursemdetw/project_site/tree/gh-pages/blog"&gt;https://github.com/coursemdetw/project_site/tree/gh-pages/blog&lt;/a&gt; 中的資料送到全球資訊網伺服器即可.&lt;/p&gt;
&lt;p&gt;本專題製作採用 &lt;a href="http://leoeditor.com/"&gt;http://leoeditor.com/&lt;/a&gt; 管理所有資料, 但各參與協同的人員各自在 users 目錄下擁有一個 .leo 檔案, 可以分別控管本網誌的所有設定, 並且以協同方式維護網誌內容.&lt;/p&gt;
&lt;p&gt;本網誌分為近端與 Github Pages 端的資料管理配置, 關鍵字搜尋採用 &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/tipue_search"&gt;https://github.com/getpelican/pelican-plugins/tree/master/tipue_search&lt;/a&gt;, 近端的設定檔案為 local_publishconf.py, 而 Github Pages 端的特有設定為 publishconf.py, 且為了區隔兩端的資料連結差異, 近端的 Pelican 轉檔按鈕為 @button local pelican, 而 Github Pages 端的轉檔按鈕為 @button gh-pages pelican.&lt;/p&gt;
&lt;p&gt;最後, 為了有效區隔各組員所寫的網誌文章, content 目錄內的各 .md 檔案, 除了要求必須冠上組員帳號外, 也希望在文章標題前面加上組員帳號標示, 以避免組員間因為使用相同的文章標題名稱而無法正確完成 Pelican 網誌的轉檔 (本系統採用自動文章標題轉換為 html 檔名的設定).&lt;/p&gt;
&lt;h2&gt;組員參與協同&lt;/h2&gt;
&lt;p&gt;所有專題製作成員均為 &lt;a href="https://github.com/coursemdetw/project_site"&gt;https://github.com/coursemdetw/project_site&lt;/a&gt; 倉儲的協同者, git clone 資料後, 即可將分支固定在 gh-pages 後進行各項資料協同管理的工作.&lt;/p&gt;
&lt;p&gt;參與協同的步驟:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;git clone 倉儲資料.&lt;/li&gt;
&lt;li&gt;確定在近端已經切換分支到 gh-pages, 利用  Leo Editor 開啟 users 目錄下的 user_template.leo 檔案.&lt;/li&gt;
&lt;li&gt;修改 @edit user_20160301.md 的標題與內容, 例如, 將 @edit user_20160301.md 改為 @edit 學號_20160301.md, 且將 "Title: user - 使用者的範例網誌文章標題" 改為 "Title: 學號 - 使用者的範例網誌文章標題", "Author: user" 改為 "Author: 學號" 之後, 記得將已經修改過的 user_template.leo 存為 學號.leo 檔案.&lt;/li&gt;
&lt;li&gt;在學號.leo 專案檔案中, 將滑鼠停在 @button local pelican 節點上, 再點擊 local-pelican 按鈕進行轉檔, 最後利用瀏覽器開啟 project_site 目錄中的 index.html, 檢查是否在近端可以正確轉檔.&lt;/li&gt;
&lt;li&gt;若近端的 Pelican 網誌可以正確納入所新增的文章內容, 改將滑鼠停在 @button gh-pages pelican 節點上, 再點擊 gh-pages-pelican 按鈕, 進行 Github Pages 端所需要的內容轉檔.&lt;/li&gt;
&lt;li&gt;利用 git add -A, git commit -m "訊息", git push origin gh-pages 等3個步驟, 將 gh-pages 分支資料,  提交並推送到 &lt;a href="http://project.mde.tw"&gt;http://project.mde.tw&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;網誌資料儲存規劃&lt;/h2&gt;
&lt;p&gt;一個靜態網站的內容除了文字檔案外, 還包括 Javascript 檔案, Brython 檔案, 圖檔, 影片檔案, 以及其他各種非 html 的文件檔, 為了保有本網誌專案倉儲的簡潔, 除了必要的設定與文字檔案外, 其他資料均存放在倉儲以外的相關資源位置, 其規劃如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Javascript 與 Brython 程式檔案, 除了儘量使用各 CDN 所提供的最新版本外, 目前以 &lt;a href="https://github.com/2015fallhw/cptocadp/tree/master/static"&gt;https://github.com/2015fallhw/cptocadp/tree/master/static&lt;/a&gt; 對應的 OpenShift 網站存放, 例如, Cango-8v03.js 位於 &lt;a href="http://cptocadp-2015fallhw.rhcloud.com/static/Cango-8v03.js"&gt;http://cptocadp-2015fallhw.rhcloud.com/static/Cango-8v03.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一般圖檔與非 html 文件檔案, 建議以 Github Pages 的網頁架構儲存在獨立的倉儲中, 且該倉儲僅存放檔案, 而無文字檔案, 例如:
&lt;a href="http://coursemdetw.github.io/project_site_files/files/kmol_1172x340_color_3yrs.png"&gt;http://coursemdetw.github.io/project_site_files/files/kmol_1172x340_color_3yrs.png&lt;/a&gt; 即為其中的一個圖檔.&lt;/li&gt;
&lt;li&gt;影片檔案則分別存在 &lt;a href="https://vimeo.com/"&gt;https://vimeo.com/&lt;/a&gt; 與 &lt;a href="https://www.youtube.com/"&gt;https://www.youtube.com/&lt;/a&gt; (相同檔案各存一份).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;圖檔引用&lt;/h2&gt;
&lt;p&gt;&lt;img src="http://coursemdetw.github.io/project_site_files/files/kmol_1172x340_color_3yrs.png" width="600" /&gt;&lt;/p&gt;
&lt;h2&gt;影片檔引用&lt;/h2&gt;
&lt;iframe src="https://player.vimeo.com/video/147991541" width="600" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/147991541"&gt;Gocycle_disassemble&lt;/a&gt; from &lt;a href="https://vimeo.com/user24079973"&gt;虎尾科大機械設計工程&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;特別提醒&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;本網誌為了同時支援近端與遠端的資料內容使用, 資料轉檔分為近端按鈕與遠端按鈕, 協同成員在推送資料到遠端之前, 必須確定資料為遠端 Github Pages 格式.&lt;/li&gt;
&lt;li&gt;鼓勵各成員深入研究本網誌的細節架構, 勇於提出問題, 解決問題, 打造出最適合機械設計工程團隊使用的網際協同架構、模式與系統工具.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="教學導引"></category><category term="網誌設定"></category></entry><entry><title>40323123 - 專題組員的範例文章標題</title><link href="http://project.mde.tw/blog/40323123-zhuan-ti-zu-yuan-de-fan-li-wen-zhang-biao-ti.html" rel="alternate"></link><updated>2016-03-01T14:28:38+08:00</updated><author><name>40323123</name></author><id>tag:project.mde.tw,2016-03-01:blog/40323123-zhuan-ti-zu-yuan-de-fan-li-wen-zhang-biao-ti.html</id><summary type="html">&lt;p&gt;這裡放入 40323123 所寫的文章摘要&lt;/p&gt;


&lt;p&gt;這裡為 40323123 所寫的文章主要內容&lt;/p&gt;</summary><category term="範例"></category></entry><entry><title>user - 使用者的範例網誌文章標題</title><link href="http://project.mde.tw/blog/user-shi-yong-zhe-de-fan-li-wang-zhi-wen-zhang-biao-ti.html" rel="alternate"></link><updated>2016-03-01T14:28:38+08:00</updated><author><name>user</name></author><id>tag:project.mde.tw,2016-03-01:blog/user-shi-yong-zhe-de-fan-li-wang-zhi-wen-zhang-biao-ti.html</id><summary type="html">&lt;p&gt;這裡放入 user 所寫的文章摘要&lt;/p&gt;


&lt;p&gt;這裡為 user 所寫的文章主要內容&lt;/p&gt;</summary><category term="範例"></category></entry><entry><title>yen - Github Pages 網頁資料更新問題</title><link href="http://project.mde.tw/blog/yen-github-pages-wang-ye-zi-liao-geng-xin-wen-ti.html" rel="alternate"></link><updated>2016-03-01T14:28:38+08:00</updated><author><name>yen</name></author><id>tag:project.mde.tw,2016-03-01:blog/yen-github-pages-wang-ye-zi-liao-geng-xin-wen-ti.html</id><summary type="html">&lt;p&gt;突然間, Github Pages 的網頁轉換機制不再更新&lt;/p&gt;


&lt;p&gt;使用 Github Pages 建立網頁最大的問題就是, 在完全沒有任何錯誤訊息提醒的情況下, 送到 Github Pages 對應分支倉儲的資料不再成功轉為網頁資料.&lt;/p&gt;
&lt;p&gt;因應之道, 只能刪除原先不再更新的倉儲, 另外再建立一個對應的 Github Pages 倉儲, 重新進行各項設定.&lt;/p&gt;</summary><category term="Github Pages"></category></entry></feed>